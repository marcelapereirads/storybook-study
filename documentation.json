{
    "pipes": [],
    "interfaces": [
        {
            "name": "Errors",
            "id": "interface-Errors-5043f799c731f1d1b7213d838992e57a",
            "file": "src/app/pages/input-page/input-page.component.ts",
            "type": "interface",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\n\ninterface Errors {\n  required: string;\n  maxlength: string;\n}\n\n@Component({\n  selector: 'app-input-page',\n  templateUrl: './input-page.component.html',\n})\nexport class InputPageComponent {\n  get errors(): string[] {\n    const errorMessages: Errors = {\n      required: 'Please fill in the field',\n      maxlength: 'The value exceeds the allowed number of characters',\n    };\n\n    if (this.control.errors !== null) {\n      return Object.keys(this.control.errors).map(\n        (error) => errorMessages[error as keyof Errors]\n      );\n    }\n\n    return [];\n  }\n\n  control = new FormControl(null, [\n    Validators.required,\n    Validators.maxLength(10),\n  ]);\n\n  readonly code = `<app-input label=\"Input field\" id=\"simple-input\" [disabled]=\"false\" [errors]=\"errors\" [control]=\"control\"></app-input>`;\n}\n",
            "properties": [
                {
                    "name": "maxlength",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "required",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LoginError",
            "id": "interface-LoginError-27bbf1ac16e0c4dfc5a7479e61c38701",
            "file": "src/app/pages/home/login-sample/login-error.interface.ts",
            "type": "interface",
            "sourceCode": "export interface LoginError {\n  required: string;\n  minlength: string;\n}\n",
            "properties": [
                {
                    "name": "minlength",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "required",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "HamburgerButtonService",
            "id": "injectable-HamburgerButtonService-f1b63d038947c2f278570bc3388d2280",
            "file": "src/app/core/header/hamburguer-button/hamburger-button.service.ts",
            "properties": [
                {
                    "name": "buttonClicked$",
                    "defaultValue": "new BehaviorSubject<boolean>(this.menuIsOpen)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "isMobile",
                    "defaultValue": "this.breakpointObserver.isMatched('(min-width: 768px)')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "menuIsOpen",
                    "defaultValue": "this.isMobile",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "emitClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "getOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 30
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BreakpointObserver } from '@angular/cdk/layout';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HamburgerButtonService {\n\n  isMobile = this.breakpointObserver.isMatched('(min-width: 768px)');\n  menuIsOpen = this.isMobile;\n  buttonClicked$ = new BehaviorSubject<boolean>(this.menuIsOpen);\n\n  constructor(private breakpointObserver: BreakpointObserver) { }\n\n  emitClick(): void {\n    if (!this.isMobile) {\n      this.menuIsOpen = !this.menuIsOpen;\n      this.buttonClicked$.next(this.menuIsOpen);\n    }\n  }\n\n  closeMenu(): void {\n    if (!this.isMobile) {\n      this.menuIsOpen = false;\n    }\n  }\n\n  getOpen(): Observable<boolean> {\n    return this.buttonClicked$.asObservable();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-34e7bb58cd408649f019e440c35026ac",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menuIsOpen",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "menuSubscription$",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "title",
                    "defaultValue": "'storybook-study'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "verifyMenuOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { HamburgerButtonService } from './core/header/hamburguer-button/hamburger-button.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  title = 'storybook-study';\n  menuSubscription$!: Subscription;\n  menuIsOpen = true;\n\n  constructor(private hamburgerButtonService: HamburgerButtonService) { }\n\n  ngOnInit() {\n    this.verifyMenuOpen();\n  }\n\n  ngOnDestroy() {\n    this.menuSubscription$.unsubscribe();\n  }\n\n  verifyMenuOpen() {\n    this.menuSubscription$ = this.hamburgerButtonService.getOpen().subscribe((isOpen: boolean) => this.menuIsOpen = isOpen);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/assets/variables\";\n\n.page {\n    &__shaddow {\n        background-color: rgba(65%, 65%, 65%, 0.4);\n        width: 100%;\n        height: 100%;\n        position: absolute;\n    }\n\n    &__sidebar {\n        min-width: 300px;\n        max-width: 80%;\n        \n    }\n\n    &__main {\n        width: 80%;\n    }\n}\n\n@media (min-width: $mobile-width) {\n    .page {\n        &__content {\n            display: flex;\n        }\n\n        &__shaddow {\n            background: none;\n            position: relative;\n            width: unset;\n        }\n\n        &__sidebar {\n            max-width: 30%;\n        }\n    }\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "hamburgerButtonService",
                        "type": "HamburgerButtonService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "hamburgerButtonService",
                        "type": "HamburgerButtonService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"page\">\n    <app-header></app-header>\n    <div class=\"page__content\">\n        <div *ngIf=\"menuIsOpen\" class=\"page__shaddow\">\n            <div class=\"page__sidebar\">\n                <app-sidebar-menu></app-sidebar-menu>\n            </div>\n        </div>\n        <div class=\"page__main\">\n            <router-outlet></router-outlet>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "ButtonPageComponent",
            "id": "component-ButtonPageComponent-57434d89e7c44b21ab113f08a8737e45",
            "file": "src/app/pages/button-page/button-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "code",
                    "defaultValue": "`<app-button type=\"primary\" [action]=\"showAlert\"></app-button>`",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "showAlert",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component} from '@angular/core';\n\n@Component({\n  selector: 'app-button-page',\n  templateUrl: './button-page.component.html'\n})\nexport class ButtonPageComponent {\n\n  readonly code = `<app-button type=\"primary\" [action]=\"showAlert\"></app-button>`;\n\n  showAlert = () => {\n    alert('Clicked');\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<app-default-page [title]=\"'Button'\" [code]=\"code\">\n    <lib-button type=\"primary\" [action]=\"showAlert\"></lib-button>\n</app-default-page>"
        },
        {
            "name": "DefaultPageComponent",
            "id": "component-DefaultPageComponent-bfe92b5ce53085977637627ba66d62fe",
            "file": "src/app/pages/default-page/default-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-default-page",
            "styleUrls": [
                "./default-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./default-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "code",
                    "defaultValue": "''",
                    "line": 11
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "line": 10
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "showPreview",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "changeView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-default-page',\n  templateUrl: './default-page.component.html',\n  styleUrls: ['./default-page.component.scss']\n})\nexport class DefaultPageComponent {\n\n  @Input() title = '';\n  @Input() code = '';\n  showPreview = true;\n\n  changeView() {\n    this.showPreview = !this.showPreview;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/assets/variables\";\n\n.default {\n    margin-top: 16px;\n\n    &__title {\n        color: $secondary-color;\n    }\n\n    &__separator {\n        border: solid $secondary-color;\n    }\n\n    &__content {\n        margin-top: 32px;\n        padding: 16px;\n        border: solid 1px;\n    }\n\n    &__action {\n        border: none;\n        background-color: $white;\n        display: flex;\n        margin-top: 8px;\n        padding: 4px;        \n\n        &:hover {\n            background-color: $light-gray;\n        }\n    }\n}\n\n.hide {\n    display: none;\n}\n\n.code {\n    background-color: $light-gray;\n}",
                    "styleUrl": "./default-page.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"default container\">\n    <h2 class=\"default__title\">{{title}}</h2>\n    <div class=\"default__separator\"></div>\n    <div class=\"default__content\">\n        <div class=\"default__preview\" [ngClass]=\"{hide: !showPreview}\">\n            <ng-content></ng-content>\n        </div>\n        <div class=\"default__code\" [ngClass]=\"{hide: showPreview}\">\n            {{code}}\n        </div>\n        <div class=\"d-flex justify-content-end\">\n            <button class=\"default__action\" (click)=\"changeView()\" [ngClass]=\"{code: !showPreview}\">\n                <img src=\"assets/svg/code.svg\" alt=\"code\" />\n            </button>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "HamburgerButtonComponent",
            "id": "component-HamburgerButtonComponent-677d2730e17b3404969825efc462e86b",
            "file": "src/app/core/header/hamburguer-button/hamburger-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-hamburger-button",
            "styleUrls": [
                "./hamburger-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./hamburger-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "emitClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\nimport { HamburgerButtonService } from './hamburger-button.service';\n\n@Component({\n  selector: 'app-hamburger-button',\n  templateUrl: './hamburger-button.component.html',\n  styleUrls: ['./hamburger-button.component.scss']\n})\nexport class HamburgerButtonComponent {\n\n  constructor(private hamburgerButtonService: HamburgerButtonService) { }\n\n  emitClick() {\n    this.hamburgerButtonService.emitClick();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/assets/variables\";\n\n.menu {\n    border: 0;\n    background-color: $primary-color;\n}",
                    "styleUrl": "./hamburger-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "hamburgerButtonService",
                        "type": "HamburgerButtonService"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "hamburgerButtonService",
                        "type": "HamburgerButtonService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<button class=\"menu\" (click)=\"emitClick()\">\n    <img src=\"/assets/svg/hamburger-menu.svg\" alt=\"menu\"/>\n</button>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-2b83331db3eaaf641e8835029544c09f",
            "file": "src/app/core/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\nimport { HamburgerButtonService } from './hamburguer-button/hamburger-button.service';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent {\n\n  constructor(private hamburgerButtonService: HamburgerButtonService) { }\n\n  closeMenu() {\n    this.hamburgerButtonService.closeMenu();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/assets/variables\";\n\n.header {\n    background-color: $primary-color;\n    align-items: center;\n    justify-content: space-evenly;\n\n    a {\n        color: $white;\n        text-align: center;\n        font-size: 2.5em;\n        font-family: Arial, Helvetica, sans-serif;\n        margin: 0;\n\n        &:hover {\n            text-decoration: none;\n        }\n    }\n}\n\n@media (min-width: $mobile-width) {\n    .header__menu {\n        display: none;\n    }\n}\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "hamburgerButtonService",
                        "type": "HamburgerButtonService"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "hamburgerButtonService",
                        "type": "HamburgerButtonService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"header row d-flex justify-content-evenly m-0\">\n    <app-hamburger-button class=\"header__menu\"></app-hamburger-button>\n    <a [routerLink]=\"['/']\" (click)=\"closeMenu()\">Component Lib</a>\n</div>"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-0368ba31f32dcbd90cb54a0bd661b89c",
            "file": "src/app/pages/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/assets/variables\";\n\n.home {\n\n    margin: 32px;\n\n    &__title {\n        color: $secondary-color;\n        margin-bottom: 32px;\n    }\n\n    a {\n        color: $primary-color;\n        text-decoration: underline;\n    }\n}\n",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"home\">\n    <h2 class=\"home__title\">About the project</h2>\n    <p>This project is a component library demo built with Angular and Storybook.</p>\n\n    <h3 class=\"home__title\">Sample</h3>\n    <app-login-sample></app-login-sample>\n</div>"
        },
        {
            "name": "InputPageComponent",
            "id": "component-InputPageComponent-5043f799c731f1d1b7213d838992e57a",
            "file": "src/app/pages/input-page/input-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-input-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "code",
                    "defaultValue": "`<app-input label=\"Input field\" id=\"simple-input\" [disabled]=\"false\" [errors]=\"errors\" [control]=\"control\"></app-input>`",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "control",
                    "defaultValue": "new FormControl(null, [\n    Validators.required,\n    Validators.maxLength(10),\n  ])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\n\ninterface Errors {\n  required: string;\n  maxlength: string;\n}\n\n@Component({\n  selector: 'app-input-page',\n  templateUrl: './input-page.component.html',\n})\nexport class InputPageComponent {\n  get errors(): string[] {\n    const errorMessages: Errors = {\n      required: 'Please fill in the field',\n      maxlength: 'The value exceeds the allowed number of characters',\n    };\n\n    if (this.control.errors !== null) {\n      return Object.keys(this.control.errors).map(\n        (error) => errorMessages[error as keyof Errors]\n      );\n    }\n\n    return [];\n  }\n\n  control = new FormControl(null, [\n    Validators.required,\n    Validators.maxLength(10),\n  ]);\n\n  readonly code = `<app-input label=\"Input field\" id=\"simple-input\" [disabled]=\"false\" [errors]=\"errors\" [control]=\"control\"></app-input>`;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "errors": {
                    "name": "errors",
                    "getSignature": {
                        "name": "errors",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 14
                    }
                }
            },
            "templateData": "<app-default-page [title]=\"'Input'\" [code]=\"code\">\n    <lib-input\n        label=\"Input field\"\n        id=\"simple-input\"\n        [disabled]=\"false\"\n        [errors]=\"errors\"\n        [control]=\"control\"\n    >\n    </lib-input>\n</app-default-page>"
        },
        {
            "name": "LoginSampleComponent",
            "id": "component-LoginSampleComponent-22d6c12a55646caa197c5a54dab3373e",
            "file": "src/app/pages/home/login-sample/login-sample.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-sample",
            "styleUrls": [
                "./login-sample.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-sample.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "this.createForm()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "createForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "getControl",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getErrors",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { LoginErrorMessages } from './login-error-messages.constant';\nimport { LoginError } from './login-error.interface';\n\n@Component({\n  selector: 'app-login-sample',\n  templateUrl: './login-sample.component.html',\n  styleUrls: ['./login-sample.component.scss'],\n})\nexport class LoginSampleComponent implements OnInit {\n  form = this.createForm();\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {}\n\n  createForm(): FormGroup {\n    return this.formBuilder.group({\n      username: ['', [Validators.required]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n    });\n  }\n\n  getControl(fieldName: string) {\n    return this.form.get(fieldName) as FormControl;\n  }\n\n  getErrors(fieldName: string) {\n    const errors = this.form.get(fieldName)?.errors as FormControl;\n\n    if (errors) {\n      return Object.keys(errors).map(\n        (error: string) => LoginErrorMessages[error as keyof LoginError]\n      );\n    }\n\n    return [];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/assets/variables\";\n\n.login {\n    width: fit-content;\n    padding: 0.8rem;\n    border: solid $primary-color;\n    border-radius: 0.5rem;\n\n    &__fields {\n        display: flex;\n        flex-direction: column;\n        align-items: flex-start;\n    }\n\n    &__submit {\n        margin-top: 2rem;\n    }\n}",
                    "styleUrl": "./login-sample.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form [formGroup]=\"form\" class=\"login\">\n    <fieldset class=\"login__fields\">\n        <legend>Login</legend>\n        <lib-input\n            label=\"Username\"\n            [control]=\"getControl('username')\"\n            [errors]=\"getErrors('username')\"\n        >\n        </lib-input>\n        <lib-input\n            label=\"Password\"\n            type=\"password\"\n            [control]=\"getControl('password')\"\n            [errors]=\"getErrors('password')\"\n        >\n        </lib-input>\n        <lib-button text=\"Login\" class=\"login__submit\"></lib-button>\n    </fieldset>\n</form>"
        },
        {
            "name": "SelectPageComponent",
            "id": "component-SelectPageComponent-5e5931a16d49edde9412a9faa5875307",
            "file": "src/app/pages/select-page/select-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-select-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./select-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "code",
                    "defaultValue": "`<app-select [options]=\"options\" [label]=\"'Select'\" [id]=\"'select'\" [control]=\"control\" [error]=\"error\"></app-select>`",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "control",
                    "defaultValue": "new FormControl(null, [Validators.required])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "error",
                    "defaultValue": "'Please fill in the field'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "options",
                    "defaultValue": "[\n    {\n      value: 'option1',\n      viewValue: 'Option 1'\n    },\n    {\n      value: 'option2',\n      viewValue: 'Option 2'\n    },\n    {\n      value: 'option3',\n      viewValue: 'Option 3'\n    }\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-select-page',\n  templateUrl: './select-page.component.html'\n})\nexport class SelectPageComponent {\n\n  options = [\n    {\n      value: 'option1',\n      viewValue: 'Option 1'\n    },\n    {\n      value: 'option2',\n      viewValue: 'Option 2'\n    },\n    {\n      value: 'option3',\n      viewValue: 'Option 3'\n    }\n  ];\n\n  control = new FormControl(null, [Validators.required]);\n\n  readonly error = 'Please fill in the field';\n  readonly code = `<app-select [options]=\"options\" [label]=\"'Select'\" [id]=\"'select'\" [control]=\"control\" [error]=\"error\"></app-select>`;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<app-default-page [title]=\"'Select'\" [code]=\"code\">\n    <lib-select\n        [options]=\"options\"\n        [label]=\"'Select'\"\n        [id]=\"'select'\"\n        [control]=\"control\"\n        [error]=\"error\"\n    >\n    </lib-select>\n</app-default-page>"
        },
        {
            "name": "SidebarMenuComponent",
            "id": "component-SidebarMenuComponent-a85ebf6d056965b7eb87619ae4d53368",
            "file": "src/app/core/sidebar-menu/sidebar-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidebar-menu",
            "styleUrls": [
                "./sidebar-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sidebar-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menuItems",
                    "defaultValue": "[\n    {\n      name: 'Input',\n      url: '/input'\n    },\n    {\n      name: 'Select',\n      url: '/select'\n    },\n    {\n      name: 'Button',\n      url: '/button'\n    }\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\nimport { HamburgerButtonService } from '../header/hamburguer-button/hamburger-button.service';\n\n@Component({\n  selector: 'app-sidebar-menu',\n  templateUrl: './sidebar-menu.component.html',\n  styleUrls: ['./sidebar-menu.component.scss']\n})\nexport class SidebarMenuComponent {\n\n  menuItems = [\n    {\n      name: 'Input',\n      url: '/input'\n    },\n    {\n      name: 'Select',\n      url: '/select'\n    },\n    {\n      name: 'Button',\n      url: '/button'\n    }\n  ];\n\n  constructor(private hamburgerButtonService: HamburgerButtonService) { }\n\n  closeMenu() {\n    this.hamburgerButtonService.emitClick();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"/src/assets/variables\";\n\n.menu {\n    height: 100%;\n    background-color: $white;\n\n    &__header {\n        padding: 8px;\n    }\n\n    &__title {\n        color: $secondary-color;\n        font-weight: bold;\n    }\n\n    &__list {\n        padding-left: 0;\n    }\n\n    &__item {\n       list-style-type: none;\n       border-bottom: 1px solid $light-gray;\n       font-size: 1.2rem;\n       padding-left: 2px;\n\n       .menu__link {\n           display: block;\n           padding: 4px 8px;\n           font-weight: bold;\n       }\n\n       &:hover {\n           background-color: $light-gray;\n       }\n    }\n\n    &__item--active {\n        background-color: $primary-color;\n\n        .menu__link {\n            color: $secondary-color;\n        }\n\n        &:hover {\n            background-color: $primary-color;\n        }\n    }\n\n    &__link {\n        color: $primary-color;\n        &:hover {\n            text-decoration: none;\n        }\n    }\n}\n\n@media (min-width: $mobile-width) {\n    .menu__item {\n        font-size: 1rem;\n    }\n}\n",
                    "styleUrl": "./sidebar-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "hamburgerButtonService",
                        "type": "HamburgerButtonService"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "hamburgerButtonService",
                        "type": "HamburgerButtonService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<aside class=\"menu\">\n    <div class=\"menu__header\">\n        <h5 class=\"menu__title\">Components</h5>\n    </div>\n    <nav>\n        <ul class=\"menu__list\">\n            <li class=\"menu__item\" [routerLinkActive]=\"'menu__item--active'\" *ngFor=\"let item of menuItems\">\n                <a [routerLink]=\"[item.url]\" class=\"menu__link\" (click)=\"closeMenu()\">{{item.name}}</a>\n            </li>\n        </ul>\n    </nav>\n</aside>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "HeaderModule"
                        },
                        {
                            "name": "HomeModule"
                        },
                        {
                            "name": "SidebarMenuModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonPageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DefaultPageModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DefaultPageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DefaultPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DefaultPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HeaderModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HamburgerButtonComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HamburgerButtonComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "LoginSampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InputPageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InputPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DefaultPageModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SelectPageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SelectPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DefaultPageModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SidebarMenuModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SidebarMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonPageModule"
                        },
                        {
                            "name": "InputPageModule"
                        },
                        {
                            "name": "SelectPageModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SidebarMenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/header/header.module.ts",
                "type": "[]",
                "defaultValue": "[HeaderComponent, HamburgerButtonComponent]"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "LoginErrorMessages",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/home/login-sample/login-error-messages.constant.ts",
                "type": "object",
                "defaultValue": "{\n  required: 'Please fill in the field',\n  minlength: 'The minimum password length is 6 digits',\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/core/header/header.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/header/header.module.ts",
                    "type": "[]",
                    "defaultValue": "[HeaderComponent, HamburgerButtonComponent]"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/pages/home/login-sample/login-error-messages.constant.ts": [
                {
                    "name": "LoginErrorMessages",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/home/login-sample/login-error-messages.constant.ts",
                    "type": "object",
                    "defaultValue": "{\n  required: 'Please fill in the field',\n  minlength: 'The minimum password length is 6 digits',\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "input",
                        "component": "InputPageComponent"
                    },
                    {
                        "path": "select",
                        "component": "SelectPageComponent"
                    },
                    {
                        "path": "button",
                        "component": "ButtonPageComponent"
                    },
                    {
                        "path": "",
                        "component": "HomeComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/header/hamburguer-button/hamburger-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HamburgerButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/header/hamburguer-button/hamburger-button.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HamburgerButtonService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/header/header.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/sidebar-menu/sidebar-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/button-page/button-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/default-page/default-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/login-sample/login-error-messages.constant.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoginErrorMessages",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/login-sample/login-error.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginError",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/login-sample/login-sample.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginSampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/input-page/input-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/input-page/input-page.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Errors",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/select-page/select-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}